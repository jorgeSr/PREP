<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="Periodo"
		backgroundAlpha="0.8" backgroundColor="#EAC26B" xmlns:popups="views.popups.*"
		creationComplete="init(event)">
	
	<fx:Script>
		<![CDATA[
			import as3.Globals;
			import as3.pojos.Period;
			import as3.utils.date.DateUtil;
			
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.PopUpEvent;
			
			import views.popups.ConfirmPopUp;
			import views.popups.DatePopUp;
			import views.transacciones.CRUDTransaction;
			import views.transaccionesestaticas.CRUDStaticTransaction;
			import views.transaccionesestaticas.StaticTransactionList;
			
			public var iniDate:Date;
			public var finDate:Date;
			
			protected function init(event:FlexEvent):void
			{
				if( data.update )
				{
					iniDate = DateUtil.getStringAsDate( Globals.periodo.iniDate );
					finDate = DateUtil.getStringAsDate( Globals.periodo.endDate );
					
					tiFini.text = DateUtil.getDateAsStringdateview( iniDate );
					tiFfin.text = DateUtil.getDateAsStringdateview( finDate );
					
					btnNewT.enabled = btnUpDelT.enabled = btnDel.visible = true;					
					btnProcess.label = "Modificar Perido";
					
					return;
				}
				
				btnProcess.label = "Crear Perido"; 
			}
			
			
			protected function tiFini_clickHandler(event:MouseEvent):void
			{
				 var datePop:DatePopUp = new DatePopUp();		
				 datePop.addEventListener(PopUpEvent.OPEN, function(e:Event):void{enabled = false});
				 datePop.addEventListener(PopUpEvent.CLOSE, function(e:Event):void{enabled = true});
				 datePop.addEventListener("okDate", function(e:Event):void{
					 iniDate = datePop.spin.selectedDate;
					 tiFini.text = DateUtil.getDateAsStringdateview( iniDate );
				 });
				 datePop.open(this);
			}
			
			protected function tiFfin_clickHandler(event:MouseEvent):void
			{
				var datePop:DatePopUp = new DatePopUp();
				datePop.addEventListener(PopUpEvent.OPEN, function(e:Event):void{enabled = false});
				datePop.addEventListener(PopUpEvent.CLOSE, function(e:Event):void{enabled = true});
				datePop.addEventListener("okDate", function(e:Event):void{
					finDate = datePop.spin.selectedDate;
					tiFfin.text = DateUtil.getDateAsStringdateview( finDate );
				});
				datePop.open(this);
			}
			
			protected function verify():void
			{
				if( data.update )
				{
					cPop.content = "Desea modificar las fechas del periodo?... todas las transacciones de este seran eliminadas !";
					cPop.open( this );
				}
				else
					process(); //Si no es update simplemente se crea
			}
			
			protected function process():void
			{
				if( finDate != null && iniDate != null )
				{
					if( DateUtil.compareDates( iniDate, finDate ) == 1 )
					{
						var p:Period = new Period();
						p.endDate = DateUtil.getDateAsString( finDate );
						p.iniDate = DateUtil.getDateAsString( iniDate );
						
						if( data.update )
						{
							p.id = Globals.periodo.id;
							rem.update(p);
						}						
						else
							rem.create(p);
						return;
					}
					
					pop.content = "La fecha final debe se mayor a la inicial";
					pop.open(this);
					return;
				}
				
				pop.content = "Seleccione las Fechas del Periodo";
				pop.open(this);
			}
			
			protected function faultHandler(event:FaultEvent):void
			{
				pop.title = "Error";
				pop.content = event.fault.faultString;
				pop.open(this);
			}
			
			protected function create_resultHandler(event:ResultEvent):void
			{
				if( event.result is String )
				{
					pop.title = "ERROR";
					pop.content = event.result as String;
					pop.open(this);
				}
				else
				{
					pop.title = "Listo";
					pop.content = "Periodo "+( data.update ? "Modificado":"Creado")+" Exitosamente";					
					pop.open(this);
					if( data.update ) Globals.periodo = null; //Se pone como null y se refresca periodo en mainview
					navigator.popView();
				}
			}
			
			protected function delete_resultHandler(event:ResultEvent):void
			{
				if( !(event.result is Period) )
				{
					pop.title = "ERROR";
					pop.content = "Ocurrio un error al eliminar el periodo, contacte al Administrador ! \n "+event.result;
					pop.open(this);
				}
				else
				{
					pop.title = "Listo";
					pop.content = "Periodo Eliminado Exitosamente";					
					pop.open(this);
					Globals.periodo = null; //Se pone como null y se refresca periodo en mainview
					navigator.popView();
				}
			}
			
			protected function btnUpDelT_clickHandler(event:MouseEvent):void
			{
				var obj:Object = new Object;
				obj.viewClass = CRUDStaticTransaction;
				obj.type = 2;
				navigator.pushView( StaticTransactionList, obj );
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:RemoteObject id="rem" destination="zend" source="periodC" fault="faultHandler(event)">
			<s:method name="create" result="create_resultHandler(event)"/>
			<s:method name="update" result="create_resultHandler(event)"/>
			<s:method name="remove" result="delete_resultHandler(event)"/>
		</s:RemoteObject>
		
		<popups:AlertPopUp id="pop" open="enabled = true" close="enabled = true" />
		<popups:ConfirmPopUp id="cPop" ok="process()" open="enabled = false" close="enabled = true" />
		<popups:ConfirmPopUp id="delPop" ok="rem.remove(Globals.periodo)" open="enabled = false" close="enabled = true" 
							 content="Desea Eliminar este Periodo? Todas las transacciones relacionadas seran eliminadas !"/>
	</fx:Declarations>
	
	<s:actionContent>
		<s:Button icon="@Embed('assets/del.png')" visible="false" id="btnDel" click="delPop.open(this)"/>
	</s:actionContent>
	
	<s:Rect x="0" y="0" width="{this.width}" height="{this.height}">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="#efefef" alpha="0"/>
				<s:GradientEntry color="#ffffff" alpha="0.2"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<s:Label x="0" y="0" width="100%" height="50" backgroundAlpha="0.5" backgroundColor="#F7F5F5"
			 text="  Fecha de Inicio" verticalAlign="middle"/>
	<s:Label x="0" y="175" width="100%" height="50" backgroundAlpha="0.5" backgroundColor="#F7F5F5"
			 text="  Fecha de Fin" verticalAlign="middle"/>
	<s:Label x="0" y="349" width="100%" height="50" backgroundAlpha="0.5" backgroundColor="#F7F5F5"
			 text="  Transacciones Fijas" verticalAlign="middle"/>
	
	<s:Label id="tiFini" y="49" width="100%" height="78" backgroundAlpha="0.8"
			 backgroundColor="#FFFFFF" click="tiFini_clickHandler(event)" color="#646464"
			 fontSize="35" horizontalCenter="0" text="click para seleccionar la fecha"
			 textAlign="center" verticalAlign="middle"/>
	
	<s:Label id="tiFfin" y="224" width="100%" height="77" backgroundAlpha="0.8"
			 backgroundColor="#FFFFFF" click="tiFfin_clickHandler(event)" color="#646464" fontSize="35"
			 horizontalCenter="0" text="click para seleccionar la fecha" textAlign="center"
			 verticalAlign="middle"/>
	
	<s:Button id="btnNewT" y="414" left="20" width="45%" height="80"
			  click="navigator.pushView( CRUDStaticTransaction )" enabled="false"
			  icon="@Embed('assets/add.png')"/>
	<s:Button id="btnUpDelT" y="414" right="20" width="45%" height="80" enabled="false"
			  icon="@Embed('assets/edi.png')" click="btnUpDelT_clickHandler(event)"/>
	<s:Button left="18" right="22" bottom="30" height="75" id="btnProcess"
			  click="verify()"/>
	
</s:View>
