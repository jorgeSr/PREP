<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="TransacciÃ³n Estatica"
		backgroundAlpha="0.8" backgroundColor="#EAC26B" creationComplete="view1_creationCompleteHandler(event)" xmlns:popups="views.popups.*">
	
	<fx:Script>
		<![CDATA[
			import as3.Globals;
			import as3.events.SelectedItemEvent;
			import as3.pojos.StaticTransaction;
			import as3.pojos.Transaction;
			import as3.utils.date.DateUtil;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import views.MainMenuView;
			import views.periodos.CRUDPeriod;
			
			private var tran:StaticTransaction = new StaticTransaction();
			
			protected function view1_creationCompleteHandler(event:FlexEvent):void
			{
				
				fechas.text = "Fechas: "+DateUtil.getStringdateAsStringdateview( Globals.periodo.iniDate )
					+" - "+DateUtil.getStringdateAsStringdateview( Globals.periodo.endDate );
				
				/**
				 * if there's no data, is a new transaction, otherwise is a update and 
				 * it recives an not defined object transactionDetail with the name of the category
				 * 
				 * */
				if( data != null ) 
				{
					btnDel.visible = true;
					
					//Set one by one the properties of the not formatted TransactionDetail Object//
					btnProcess.label = "Modificar Transaccion";
					selCat.text = data.categoryName;
					selDateLim.text =  DateUtil.getStringdateAsStringdateview( data.extra as String );
					tiCan.text = data.amount+"";
					tiDet.text = data.detail;
					
					selDate.enabled = false;
					//Se agrega el done
					if( data.done )
					{
						tran.date = data.date;
						tiVar.enabled = selDate.enabled = tran.done = tog.selected = true;
						selDate.text = DateUtil.getStringdateAsStringdateview( data.date as String );
						selDate.alpha = 1;
						tran.variation = data.variation;
						tiVar.text = data.variation+"";
					}
					
					taCom.text = tran.comment = data.comment;
					
					tran.amount = data.amount;
					tran.extra = data.extra;
					tran.categoryId = data.categoryId;
					tran.id = data.id;
					tran.isStatic = data.isStatic;
					tran.periodId = data.periodId;
					tran.type = data.type;
					tran.userId = data.userId;
					tran.detail = data.detail;
					
					if( tran.type == 0 )
						tS.selected = true;
					else if( tran.type == 1 )
						tE.selected = true;
					else if( tran.type == 2 )
						tA.selected = true;
					
					return;
				}	
				
				tran.periodId = Globals.periodo.id;
			}
			
			protected function popDate_okDateHandler(event:Event):void
			{	
				if( popDate.ident == "lim" )
				{
					tran.extra = DateUtil.getDateAsString( popDate.spin.selectedDate );
					selDateLim.text = DateUtil.getStringdateAsStringdateview( tran.extra );
				}
				else
				{
					tran.date = DateUtil.getDateAsString( popDate.spin.selectedDate );
					selDate.text = DateUtil.getStringdateAsStringdateview( tran.date );
				}
				
			}
			
			protected function cat_resultHandler(event:ResultEvent):void
			{
				if( event.result != null )
				{
					var ac:ArrayCollection = new ArrayCollection( event.result as Array );
					if( ac.length > 0 )
					{
						popList.lab = "name";
						popList.table = "Category";
						popList.dp = ac;
						popList.open( this );
					}
					else
					{
						pop.title = "Alerta";
						pop.content = "No ha creado ninguna categoria del tipo seleccionado aun";
						pop.open( this );
					}
				}
				else
				{
					pop.title = "Alerta";
					pop.content = "No ha creado ninguna categoria del tipo seleccionado aun";
					pop.open( this );
				}
			}
			
			protected function popList_selectedHandler(event:SelectedItemEvent):void
			{
				selCat.text = event.item.name;
				tran.categoryId = event.item.id;
				event.target.close();
			}
			
			protected function process():void
			{
				if(tran.extra == null || tran.categoryId == 0 || tiCan.text == "" || tiDet.text == "" )
				{
					pop.title = "Error";
					pop.content = "Existen campos vacios, verifique que ingreso todos los datos";
					pop.open(this);
					return;
				}
				
				var menorMayor:int = DateUtil.compareDates( DateUtil.getStringAsDate( tran.extra ) , DateUtil.getStringAsDate( Globals.periodo.iniDate ) );
				if( menorMayor == 1 )
				{
					pop.title = "Error";
					pop.content = "La fecha limite es menor a la fecha inicial del periodo";
					pop.open(this);
					return;
				}
				menorMayor = DateUtil.compareDates(  DateUtil.getStringAsDate( Globals.periodo.endDate ), DateUtil.getStringAsDate( tran.extra ) );
				if( menorMayor == 1 )
				{
					pop.title = "Error";
					pop.content = "La fecha limite es mayor a la fecha final del periodo";
					pop.open(this);
					return;
				}
				
				if( tran.done )
				{
					if( tran.date == null )
					{
						pop.title = "Error";
						pop.content = "Debe seleccionar la fecha";
						pop.open(this);
						return;
					}
					
					menorMayor = DateUtil.compareDates( DateUtil.getStringAsDate( tran.date ) , DateUtil.getStringAsDate( Globals.periodo.iniDate ) );
					if( menorMayor == 1 )
					{
						pop.title = "Error";
						pop.content = "La fecha es menor a la fecha inicial del periodo";
						pop.open(this);
						return;
					}
					menorMayor = DateUtil.compareDates(  DateUtil.getStringAsDate( Globals.periodo.endDate ), DateUtil.getStringAsDate( tran.date ) );
					if( menorMayor == 1 )
					{
						pop.title = "Error";
						pop.content = "La fecha es mayor a la fecha final del periodo";
						pop.open(this);
						return;
					}
				}
				
				tran.amount = Number(tiCan.text);
				tran.detail = tiDet.text;
				
				//The static transaction parameters
				tran.isStatic = true;
				tran.comment = taCom.text;
				tran.variation = Number( tiVar.text );
				
				if(data != null)
				{
					rem.update( tran );
				}
				else
				{
					rem.create( tran );
				}
			}
			
			protected function create_resultHandler(event:ResultEvent):void
			{
				if( !(event.result is StaticTransaction ) )
				{
					pop.title = "ERROR";
					pop.content = "Ocurrio un error al "+(data == null ? "crear":"modificar")+" la transaccion, contacte al Administrador ! \n "+event.result;
					pop.open(this);
				}
				else
				{
					pop.title = "Listo";
					pop.content = "Transaccion "+(data == null ? "creada":"modificada")+" Exitosamente";					
					pop.open(this);				
					var obj:Object = new Object();
					obj.update = true;
					navigator.pushView( CRUDPeriod, obj );
				}
			}
			
			protected function rem_faultHandler(event:FaultEvent):void
			{
				pop.title = "Error";
				pop.content = event.fault.faultString;
				pop.open(this);
			}
			
			protected function type_itemClickHandler(event:ItemClickEvent):void
			{
				tran.categoryId = 0;
				selCat.text = "click para seleccionar";
				tran.type = event.currentTarget.selectedValue as Number;
			}
			
			protected function rmv_resultHandler(event:ResultEvent):void
			{
				if( !(event.result is Transaction) )
				{
					pop.title = "ERROR";
					pop.content = "Ocurrio un error al eliminar la transaccion, contacte al Administrador ! \n "+event.result;
					pop.open(this);
				}
				else
				{
					pop.title = "Listo";
					pop.content = "Transaccion Eliminado Exitosamente";					
					pop.open(this);				
					var obj:Object = new Object();
					obj.update = true;
					navigator.pushView( CRUDPeriod, obj );
				}
			}
			
			protected function toggleswitch_changeHandler(event:Event):void
			{
				tran.done = tog.selected; 
				
				if( tog.selected )
				{
					tiVar.enabled = selDate.enabled = true;					
					selDate.alpha = 1;
				}
				else
				{
					tiVar.enabled = selDate.enabled = false;
					selDate.alpha = 0.5;
					tiVar.text = "0"; 
					tran.variation = 0;
					selDate.text = "click para seleccionar";
					tran.date = null;
				}
			}
			
		]]>
	</fx:Script>
	
	<s:actionContent>
		<s:Button icon="@Embed('assets/del.png')" visible="false" id="btnDel" click="delPop.open(this)"/>
	</s:actionContent>
	
	<s:Rect x="0" y="0" width="{this.width}" height="{this.height}">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="#efefef" alpha="0"/>
				<s:GradientEntry color="#ffffff" alpha="0.2"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<s:Label left="0" right="0" height="51" backgroundColor="#EAE1D9" fontWeight="bold"
			 text="Periodo" textAlign="center" verticalAlign="middle"/>
	<s:Label id="fechas" y="52" left="0" right="0" height="38" backgroundAlpha="0.5"
			 backgroundColor="#EAE1D9" color="#664316" fontSize="25" textAlign="center"
			 verticalAlign="middle"/>
	
	<s:Scroller x="10" top="100" bottom="78" width="517">
		<s:Group width="100%" height="100%">
			
			<s:Label x="20" y="12" fontSize="30" text="Categoria"/>
			<s:Label x="20" y="80" fontSize="30" text="Detalle"/>
			<s:Label x="20" y="147" fontSize="30" text="Cantidad"/>
			<s:Label x="20" y="573" fontSize="30" text="Comentario"/>
			<s:Label x="20" y="208" fontSize="30" text="Fecha"/>
			<s:Label x="273" y="383" fontSize="30" text="Fecha Limite"/>
			<s:Label id="selCat" y="1" left="169" right="21" height="50" backgroundAlpha="0.8"
					 backgroundColor="#FFFFFF" click="remC.findByType(tran.type)" color="#646464"
					 fontSize="25" text="click para seleccionar " textAlign="center"
					 verticalAlign="middle"/>
			<s:TextInput id="tiCan" y="132" left="170" right="20" restrict="[0-9]."/>
			<s:Label x="20" y="521" fontSize="30" text="Variacion"/>
			<s:TextInput id="tiVar" y="511" left="170" right="20" enabled="false" restrict="[0-9]."
						 text="0"/>
			<s:TextInput id="tiDet" y="66" left="170" right="20"/>
			<s:Label x="20" y="284" fontSize="30" fontWeight="bold" text="Tipo:"/>
			<s:Label x="264" y="284" fontSize="30" fontWeight="bold" text="Realizado:"/>
			<s:VGroup left="24" right="284" top="328" height="161">
				<s:RadioButton id="tS" width="90%" label="Salida" color="#5A4B4B" fontSize="30" group="{type}"
							   selected="true" value="0"/>
				<s:RadioButton id="tE" width="90%" label="Entrada" color="#5A4B4B" fontSize="30" group="{type}"
							   value="1"/>
				<s:RadioButton id="tA" width="90%" label="Ahorro" color="#5A4B4B" fontSize="30" group="{type}"
							   value="2"/>        
			</s:VGroup>
			
			<s:Label id="selDate" y="198" left="170" right="20" height="50" alpha="0.5"
					 backgroundAlpha="0.8" backgroundColor="#FFFFFF"
					 click="if(selDate.enabled){popDate.ident = '', popDate.open(this)}" color="#646464" fontSize="25"
					 text="click para seleccionar " textAlign="center" verticalAlign="middle"/>
			<s:Label id="selDateLim" y="419" left="273" right="20" height="62" backgroundAlpha="0.8"
					 backgroundColor="#FFFFFF"
					 click="{if(selDateLim.enabled){popDate.ident = 'lim', popDate.open(this)}}"
					 color="#646464" fontSize="25" text="click para seleccionar " textAlign="center"
					 verticalAlign="middle"/>
			<s:ToggleSwitch x="277" y="321" width="220" change="toggleswitch_changeHandler(event)"
							enabled="true" selected="false" id="tog"/>			
			<s:TextArea x="20" y="609" width="477" id="taCom"/>	
			
		</s:Group>
	</s:Scroller>
	<s:Button id="btnProcess" x="32" bottom="10" width="477" height="60" label="Crear TransacciÃ³n"
			  click="process()" fontSize="25"/>
	
	<fx:Declarations>
		<s:RadioButtonGroup id="type" itemClick="type_itemClickHandler(event)"/>
		<popups:AlertPopUp id="pop" open="enabled = false" close="enabled = true"/>
		<popups:DatePopUp id="popDate" open="enabled = false" close="enabled =true" okDate="popDate_okDateHandler(event)"/>
		<popups:ListPopUp id="popList" open="enabled = false" close="enabled = true" selected="popList_selectedHandler(event)"/>
		<popups:ConfirmPopUp id="delPop" ok="rem.remove(tran)" open="enabled = false" close="enabled = true" 
							 content="Desea Eliminar esta Transaccion?"/>
		
		<s:RemoteObject id="remC" destination="zend" source="categoryC" fault="rem_faultHandler(event)">
			<s:method name="findByType" result="cat_resultHandler(event)" /> 
		</s:RemoteObject>
		
		<s:RemoteObject id="rem" destination="zend" source="staticTransactionC" fault="rem_faultHandler(event)" result="create_resultHandler(event)">
			<s:method name="create" /> 
			<s:method name="update" /> 
			<s:method name="remove" result="rmv_resultHandler(event)" />
		</s:RemoteObject>
	</fx:Declarations>
</s:View>
